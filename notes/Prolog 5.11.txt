------------------Structures------------------

Everything we have worked with so far are integers and atoms. The one other type of data is a Structure 

The only difference between a structure and tuple (in Swift) is that structures have names. Also, there is no
pre-declaration of structures. 
Ex: 
	X = someStructure(7, true). 
	% the name of the structure is someStructure
	
Uses? Can represent a list.
Ex:
	X = cons(1, cons(2, cons (3, nil))).
Prolog does have built in lists 
X = [1, 2, 3].

("Syntactic sugar" = something you can write in a language that will translate in a simplistic way into something else
in the same language)

------------------Unification------------------
The way unification works:
	Any variable that is used starts in a state called "uninstantiated" (when you first use a variable, you don't know what it is).
	
X = foo(1, 2), X = foo(A, B).
% by the time the second unification occurs, the first one already says it is foo(1,2). this means that the 1 gets unified with A
% and the 2 gets unified with B. the result is:
X = foo(1, 2),
A = 1,
B = 2.
% if you were to try to do this:
X = foo(1, 2, 3), X = foo(A, B).
fail.
% this is basic the first is arity 3 and the second is arity 2