------------------------Generics------------------------
Parametric polymorphism - the use of a type variable in operations

Ex:
	func length(_ list: MyList) -> Int { //example from Swift worksheet 2 }
	This can only work with lists of Int. 
	Say you want length to also work with a list of Strings.
	What can you do?
	Answer: 
		Generics
	

What exactly is a Generic?
You can introduce something at the type level. For example:
	indirect enum MyList<A> {
		case Nils;
		case Cons(A, MyList<A>)
	}
The <A> is a Generic (or Type Variable). It is a stand-in for the type, allowing you to create the list without having to
specify a type. This way, you don't have to repeat multiple functions for different types (like you would 
with the above length func for a list of Strings).
	
New header for length with Generics:
	func length<A>(_ list: MyList <A>) -> Int { //code }

Important thing with Type Variables:
	At definition time the type is not defined. Because you do not know what type it is, there is not much
	that can actually be done with it. (The less info you have when implementing something, the less that can go wrong.)
	
Type Variables have the same kind of scope as regular variables (aka only exist in the func they're introduced in)


------------------------Tuple------------------------
Swift has support for Tuples
Tuples - allow you to hold different values in one data structure without having to define a data structure
	let tuple1 = (1, "foo", true) //known as a 3-tuple
aka let tuple2 = (Int, String, Bool) = (1, "foo", true)

Different from arrays because the values do not all have to be the same type
Tuples can hold anything you want:
	* Can hold functions
	* Can have nested tuples, functions, etc