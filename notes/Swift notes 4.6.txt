Project 3 -
	Same project but with Swift
		will be using pattern matching/enums rather than virtual dispatch or higher level functions
		

ALGEBRAIC DATA TYPES
In order for algebraic data types to be useful:
	- Have a way to check at run time which constructor is being dealt with
		Ex: For booleans there is if/else
	- Enum is the generalization of if/else for Swift
Real world example: HTTP error codes, 

-----------------Example of Enum-----------------
enum StoplightColor {
	case red
	case green
	case yellow
}

let color: StoplightColor = StoplightColor.red

switch color {
case .red:
	//code
case .green:
	//code
case .yellow:
	//code
}
-----------------End of Example-----------------

Totality checking - program guaranteed to terminate with an answer (it does not crash)
	Doable but difficult
	
Exhaustivity checking - making sure all cases are covered
	Swift switch statement has exhaustivity checking 
	In pattern matching -
		case _: is the all-encompasing option. it matches everything
		* Cases are tried in order, so if "case _" is FIRST then every case afterward is "dead code" aka will never happen
		

In Swift:
	let something: Int? = nil
The ? means it could be an Int OR it could be nil
	"Strictly better than Null"