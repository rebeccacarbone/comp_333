-----------------Higher Order Functions-----------------

1.	function callMe(foo) {
		foo();
	}
	
2. function indirectIf(x, ifTrue, ifFalse) {
		if(x) 
			ifTrue();
		else
			ifFalse();
	}
	
3.	function indirectWhile(func1, func2) {
		if(func1()) {
			func2();
			indirectWhile(func1, func2);
		}
	}
	
*4.	function wrappAdd(func1, x) {
		return function(y) {
			return func1(x + y);
		}
	}
	
-----------------List Routines-----------------

1.	arr.filter(a => a % 2 === 0);

2.	arr.map(a => a + 7);

***3. arr.reduce((accum, e) => (e < accum) ? element : accum, 0)

**4. arr.filter(a => a % 2 === 0).filter((accum, e) => accum - e, 0)

----------------Prototype Based Inheritance-----------------

*1. 
	Base.prototype.method = function() {
		console.log("base");
	}
	Sub1.prototype = new Base();
	Sub1.prototype.method = function() {
		console.log("sub1");
	}
	Sub2.prototype = new Base();
	
2.	2
	3
	
3. AddThis.prototype.sub = function(y) { return y - this.x; }

*4.	let temp = AddThis.prototype
	AddThis.prototype = {};
	AddThis.__proto__ = temp;
	AddThis.prototype.mul = function (param) { return this. * param; }